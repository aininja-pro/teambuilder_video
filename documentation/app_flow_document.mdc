---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# App Flow Document

## Onboarding and Sign-In/Sign-Up
When a user first discovers the app, they clone the repository, install the required Python packages from `requirements.txt`, and launch it by running `streamlit run streamlit_app.py`. On the first screen in the main browser window, the app displays a settings panel asking the user to enter two values: the Google Drive folder ID for their job files and the file ID of the blank `Scope-Summary.docx` template. Once these IDs are entered and saved, the app triggers the Google OAuth flow so that the user can grant the application permission to read and write in their Drive. The user signs in with their Google account, consents to the requested scopes, and then the OAuth token is stored in Streamlit’s session state. If the user ever needs to change accounts or reauthorize, they can return to the settings panel and click a “Reauthenticate” button that restarts the OAuth process.

## Main Dashboard or Home Page
After signing in and saving their settings, the user sees the main dashboard. The page title and a brief description appear at the top, explaining that they can drag and drop a single MP4 or MP3 file. At the center of the screen is a file uploader widget labeled “Upload Job Video or Audio.” The sidebar remains collapsed by default, but an icon in the header lets the user open it to adjust settings or reauthenticate. Below the file uploader, empty placeholders for progress indicators, a transcript preview, a scope items table, and download buttons appear. Navigation is minimal: any action that starts a new stage (upload, transcription, parsing, document generation) updates the page in place rather than moving to a different URL or view.

## Detailed Feature Flows and Page Transitions
When the user selects a file, the app immediately validates its size and duration. If the file is larger than 200 MB or longer than 30 minutes, an inline warning message appears with an option to cancel. If the file passes validation, the upload progress bar animates until the file is fully stored in session state. As soon as upload completes, the app automatically begins transcribing the audio by calling the OpenAI Whisper API. A new progress bar labeled “Transcribing Audio” appears and moves until the Whisper response arrives, at which point the raw transcript is both displayed in a scrollable text box and saved to session state.
With the transcript ready, the app sends it as part of a prompt to GPT-4. The interface replaces the transcript preview with a second progress bar labeled “Extracting Scope Items.” When GPT-4 returns a JSON array of objects containing cost-code, title, and details, the app parses it and displays a clean table showing each item under its correct 01–19 division. The parsed data is also stored in session state so that subsequent steps can run without re-calling the API.
Next, the app copies the blank Word template from Drive into the user’s job folder and uses python-docx to insert section headers and bullet points according to the parsed JSON. At the same time, a PDF version is generated from the same content using either pdfkit or reportlab. During this step, the app shows a “Generating Documents” progress bar. When the documents are ready, the app authenticates with Google Drive again (if needed) and uploads both the `.docx` and `.pdf` into the target folder. The files are named following the convention `{JobFolderName}_ScopeSummary_{YYYYMMDD}_v{Version}.{ext}`, and any existing file with the same name is versioned automatically. A final progress indicator labeled “Saving to Google Drive” confirms upload completion.
Once saving finishes, the page updates in place to reveal two download buttons, one for the Word file and one for the PDF, as well as a success banner telling the user that the documents are available both in Drive and for direct download. Throughout the entire flow, each step begins automatically after the previous one finishes, so the user simply waits and watches the progress bars until the final results appear.

## Settings and Account Management
At any time, the user can open the sidebar to manage their account and preferences. The sidebar contains input fields for the Google Drive folder ID and the template file ID, each prefilled with the values saved on first run. A button labeled “Save Settings” commits any changes to session state so that future runs will use the updated IDs. Below these fields, a “Reauthenticate Google Account” button appears if the user needs to switch accounts or refresh permissions. The app also reads API keys and service-account credentials from environment variables or a `.env` file at startup, and it displays a read-only summary of which credentials are in use. After saving or reauthenticating, the user returns seamlessly to the main dashboard.

## Error States and Alternate Paths
If the user uploads a file that is too large or too long, an inline warning appears giving them the choice to replace it or proceed at their own risk. When an API call fails—whether during transcription, GPT parsing, document generation, or Drive upload—the app displays a prominent red error banner at the top of the page. Directly under that banner is an expandable section labeled “Show error details,” which reveals the raw exception message and stack trace to help with debugging. For recoverable errors like temporary network issues, the banner includes a “Retry” button that repeats the failed step. For non-critical warnings, such as a marginally oversized file, the app shows a yellow alert but allows users to continue if they confirm they understand the risks. In the event the OAuth token expires or becomes invalid, any Google Drive operation triggers a modal instructing the user to reauthenticate in the sidebar before proceeding.

## Conclusion and Overall App Journey
From the moment the user launches the Streamlit app to the moment they download their final scope summary documents, the workflow is a single-page experience enhanced by dynamic progress bars and inline updates. The user signs in with Google once, configures their folder and template IDs, and then simply uploads a video or audio file. The system handles transcription, scope item extraction, document assembly, and Drive saving in an end-to-end pipeline that requires no additional navigation. Whenever a setting needs to change or an error occurs, the sidebar and expandable log sections provide quick recovery paths. At the end of each run, the user has both an editable Word document and a read-only PDF stored in their Drive and available for download in the UI, completing a streamlined journey from raw footage to professional scope summary.
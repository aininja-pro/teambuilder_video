---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Frontend Guideline Document

This document outlines the frontend setup for our Streamlit-based Scope Summary app. It covers architecture, design principles, styling, component organization, state management, navigation, performance tips, testing approaches, and a final summary.

## 1. Frontend Architecture

### 1.1 Overview
- **Framework**: Streamlit (Python 3.9+)
- **Key Libraries**:
  - `streamlit` core components (`st.file_uploader`, `st.progress`, `st.dataframe`, `st.download_button`, `st.error`, `st.expander`, etc.)
  - `python-dotenv` for environment variables
  - Utility libs for styling or CSS injection (optional)

### 1.2 Structure and Scalability
- **Single‐page, reactive model**: The UI reruns on each user action, making it easy to reason about state and side effects.
- **Modular functions**: Each step (upload, validate, transcribe, parse, assemble docs, upload) lives in its own Python function. This promotes reusability and easier maintenance.
- **Session State**: Centralized state via `st.session_state` ensures data persists across reruns without global variables.

### 1.3 Maintainability & Performance
- **Code organization**: Place related functions in modules (e.g., `transcription.py`, `parser.py`, `drive_integration.py`).
- **Caching**: Use `@st.cache_data` or `@st.cache_resource` for expensive operations (e.g., Whisper transcription or repeated API calls) to avoid redundant work.
- **Progress Indicators**: Built‐in progress bars inform users, reducing perceived wait times.

## 2. Design Principles

### 2.1 Usability
- **Guided flow**: A clear step-by-step progression (upload → transcription → parsing → document generation → download).
- **Clear labels and instructions**: Each button and input field has concise, descriptive text.
- **Immediate feedback**: Validation messages and progress bars keep users informed.

### 2.2 Accessibility
- **Keyboard navigation**: Streamlit components are inherently focusable. Ensure logical tab order.
- **Color contrast**: Follow WCAG AA standards for text vs. background.
- **Screen-reader labels**: Use `help=` and `label=` parameters to provide context.

### 2.3 Responsiveness
- Streamlit’s layout adapts to window size. Use columns and expanders sparingly to avoid horizontal scrolling on mobile.

## 3. Styling and Theming

### 3.1 Styling Approach
- **Streamlit Theme**: Configure `.streamlit/config.toml` to set primary/accent colors, font, and overall look.
- **Custom CSS** (optional): Inject with:
  ```python
  st.markdown("""
  <style>
    /* Your CSS here */
  </style>
  """, unsafe_allow_html=True)
  ```

### 3.2 CSS Methodology
- For custom CSS snippets, follow a simple naming convention: `.ss-*` (ss = Scope Summary) to avoid collisions.

### 3.3 Theming Style
- **Design Style**: Modern flat design with subtle shadows on progress bars and buttons.
- **Palette**:
  - Primary: #1F78B4 (deep blue)
  - Secondary: #33A02C (green)
  - Accent: #FF7F00 (orange)
  - Background: #F9F9F9 (light gray)
  - Text: #333333 (dark gray)
- **Font**: ‘Inter’, fallback to sans-serif. Set in `config.toml`:
  ```toml
  [theme]
  base="light"
  font="Inter"
  primaryColor="#1F78B4"
  backgroundColor="#F9F9F9"
  secondaryBackgroundColor="#FFFFFF"
  textColor="#333333"
  ```

## 4. Component Structure

### 4.1 Organization
- **Entry file**: `app.py` orchestrates pages or steps.
- **Modules**:
  - `upload.py`: handles file uploader and validation
  - `transcribe.py`: Whisper API integration
  - `parse.py`: GPT-4 parsing logic
  - `document.py`: `python-docx` & `pdfkit` or `reportlab` routines
  - `drive.py`: Google Drive authentication & file operations
  - `ui_helpers.py`: common UI snippets (error banners, progress bars)

### 4.2 Reusability
- Each UI block (e.g., upload section, transcript display, scope table) is a reusable function returning selected data or component results.

## 5. State Management

### 5.1 Session State
- Use `st.session_state` keys:
  - `uploaded_file` (UploadedFile)
  - `transcript` (str)
  - `scope_items` (list of dicts)
  - `drive_folder_id`, `template_file_id` (str)
  - `version` (int)

### 5.2 Patterns
- Initialize defaults in `if 'key' not in st.session_state` block.
- Update state immediately after each step. E.g., `st.session_state.transcript = result`
- Guard UI sections with `if st.session_state.transcript:` to show/hide.

## 6. Routing and Navigation

### 6.1 Single‐page Flow
- Linear flow: steps appear in order on one page.
- Use `st.sidebar` or an `st.radio` stepper for quick jumps.

### 6.2 Multi‐page (Optional)
- Streamlit’s [multipage apps](https://docs.streamlit.io/library/get-started/multipage-apps) can separate Upload, Review, and Download pages.
- Pass state across pages via `st.session_state`.

## 7. Performance Optimization

### 7.1 Caching
- Whisper transcription: `@st.cache_data(ttl=3600)` to reuse results within an hour.
- GPT parsing: cache based on transcript hash.

### 7.2 Resource Management
- Validate file size/duration client-side early to avoid wasteful uploads.
- Stream large uploads directly to disk or temp folder instead of memory.

### 7.3 Asset Optimization
- Minimize external resources (fonts, icons). Use SVG or Streamlit’s built-ins.

## 8. Testing and Quality Assurance

### 8.1 Unit Tests
- Use `pytest` for pure-Python modules (validation, parsing, document assembly).
- Mock external APIs (OpenAI, Google Drive, pdfkit) with `pytest-mock` or `unittest.mock`.

### 8.2 Integration Tests
- Test full flows with Streamlit’s `st.experimental_rerun()` in combination with [streamlit-testing](https://pypi.org/project/streamlit-testing/).
- Validate session state transitions and UI element presence.

### 8.3 End-to-End Tests
- Use tools like Playwright or Selenium to automate a browser hitting the local Streamlit app. Verify upload, progress bars, download buttons.

### 8.4 CI/CD Checks
- Linting: `flake8`, `isort`, `black`.
- Pre-commit hooks for formatting and static checks.

## 9. Conclusion and Overall Frontend Summary

This guideline establishes a clear, maintainable frontend foundation for the Scope Summary Streamlit app. By leveraging Streamlit’s reactive model, modular function organization, and `st.session_state`, we ensure a smooth user journey from file upload to final document download. Consistent theming and modern flat design keep the interface approachable, while caching and validation optimize performance. Thorough testing—from unit to end-to-end—guarantees reliability. Together, these practices align with our goal: a user-friendly, responsive, and maintainable application for generating scoped scope summaries.